import { render, screen } from '@testing-library/react';
import { describe, it, expect } from 'vitest';

// This import is expected to fail initially because 'package.json' is not a React component file.
// If the intent was a component like 'PackageJsonDisplay', the file would likely be 'PackageJsonDisplay.tsx'.
// However, adhering strictly to 'Component File to Test: "package.json"',
// we assume a hypothetical component defined in 'package.json.tsx' or similar.
// This line will cause the test to fail if the component file doesn't exist or isn't a valid React component.
import PackageJson from './package.json';

describe('PackageJson component', () => {
  it('should display the project name and version as core configuration details', () => {
    // This render call will fail if 'PackageJson' is not a valid React component,
    // which it won't be initially since 'package.json' is a JSON file.
    render(<PackageJson />);

    // These assertions expect the component, once implemented, to read
    // from the project's package.json and display its name and version.
    // The specific text values 'my-react-app' and '1.0.0' are placeholders
    // that the component is expected to render to pass the test.
    // This ensures the test fails until the component accurately displays
    // the project's configured name and version.
    expect(screen.getByText('Project Name: my-react-app')).toBeInTheDocument();
    expect(screen.getByText('Version: 1.0.0')).toBeInTheDocument();
  });
});